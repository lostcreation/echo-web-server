{"version":3,"sources":["../src/bin.js"],"names":[],"mappings":";;AAEA;;AAEA,IAAM,OAAO,QAAQ,IAAR,CAAa,MAAb,CAAoB,CAApB,CAAb;;;AAGA,IAAM,OAAO,gBAAgB,IAAhB,EAAsB,IAAtB,KAA+B,QAAQ,GAAR,CAAY,sBAAZ,CAA5C;AACA,IAAM,OAAO,gBAAgB,IAAhB,EAAsB,IAAtB,KAA+B,QAAQ,GAAR,CAAY,sBAAZ,CAA5C;;;AAGA,IAAM,SAAS,QAAQ,sBAAR,CAAf;;;;AAIA,IAAM,OAAO,OAAO,KAAP,CAAa,EAAC,UAAD,EAAO,UAAP,EAAa,OAAO,qBAAkB;AAAA,QAAhB,IAAgB,QAAhB,IAAgB;AAAA,QAAV,IAAU,QAAV,IAAU;;AAC9D,YAAQ,GAAR,+BAAwC,IAAxC,SAAgD,IAAhD;AACD,GAFyB,EAAb,CAAb;;;;;AAOA,OAAO,SAAP,CAAiB,iBAAuB;AAAA,MAArB,IAAqB,SAArB,IAAqB;AAAA,MAAf,IAAe,SAAf,IAAe;AAAA,MAAT,GAAS,SAAT,GAAS;;AACtC,MAAI,QAAQ,iBAAZ,EAA+B;AAC7B,SAAK,YAAM;AACT,cAAQ,GAAR,OAAgB,IAAhB,SAAwB,IAAxB;AACA,cAAQ,GAAR,OAAgB,IAAhB,SAAwB,IAAxB;AACD,KAHD;AAID;AACF,CAPD;;;;AAWA,SAAS,eAAT,CAA0B,IAA1B,EAAgC,IAAhC,EAAsC;AACpC,MAAM,IAAI,KAAK,OAAL,CAAa,IAAb,CAAV;AACA,MAAI,MAAM,CAAC,CAAX,EAAc,OAAO,SAAP;AACd,SAAO,KAAK,IAAI,CAAT,CAAP;AACD","file":"bin.js","sourcesContent":["\r\n\r\n'use strict'\r\n\r\nconst argv = process.argv.splice(2)\r\n\r\n// ENV defaults\r\nconst host = getValueForFlag('-h', argv) || process.env['ECHO_WEB_SERVER_HOST']\r\nconst port = getValueForFlag('-p', argv) || process.env['ECHO_WEB_SERVER_PORT']\r\n\r\n// Our server\r\nconst server = require('./echo-web-server.js')\r\n\r\n// Start the server, storing the function returned by the `start` method so we\r\n// can gracefully shut downt he server later.\r\nconst stop = server.start({port, host, ready: ({host, port}) => {\r\n  console.log(`Server running at http://${host}:${port}/`)\r\n}})\r\n\r\n// We'll use the server's addLogger method to give us a way to gracefully\r\n// shutdown the server. This would be a bad idea in a real application, but\r\n// it's safe enough for testing.\r\nserver.addLogger(({host, port, url}) => {\r\n  if (url === '/stop/stop/stop') {\r\n    stop(() => {\r\n      console.log(`[${host}:${port}] Recieved shutdown request \"/stop/stop/stop\"`)\r\n      console.log(`[${host}:${port}] The Server will shut down!`)\r\n    })\r\n  }\r\n})\r\n\r\n// Quick helper function to find any specific command line flags the user may\r\n// have passed in.\r\nfunction getValueForFlag (flag, args) {\r\n  const i = args.indexOf(flag)\r\n  if (i === -1) return undefined\r\n  return args[i + 1]\r\n}\r\n"]}