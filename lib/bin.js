// #!/usr/bin/env node

'use strict';
// Dependencies

var server = require('./echo-web-server.js');
var logAsHTML = require('./loggers/as-html');
var logToConsole = require('./loggers/to-console');

var argv = process.argv.splice(2);

// ENV defaults
var host = getValueForFlag('-h', argv) || process.env['ECHO_WEB_SERVER_HOST'] || null;
var port = getValueForFlag('-p', argv) || process.env['ECHO_WEB_SERVER_PORT'] || null;

// Start the server.

var _server$start = server.start(host, port, function (_ref2) {
  var host = _ref2.host;
  var port = _ref2.port;

  console.log('[EWS] New server running at http://' + host + ':' + port + '/');
});

var stop = _server$start.stop;
var addLogger = _server$start.addLogger;


addLogger(logAsHTML, logToConsole);

// Create a new logger that gives us a way to gracefully shutdown the server
// when given a "secret" url. This would be a bad idea in a real application,
// but it's safe enough for testing.
addLogger(function (_ref) {
  var host = _ref.host;
  var port = _ref.port;
  var url = _ref.url;

  if (url === '/stop/stop/stop') {
    console.log('[EWS] ' + host + ':' + port + ': Recieved shutdown request "/stop/stop/stop"');
    stop(console.log.bind(console.log, '[EWS] ' + host + ':' + port + ': Is shutting down!'));
  }
});

// Quick helper function to find any specific command line flags the user may
// have passed in.
function getValueForFlag(flag, args) {
  var i = args.indexOf(flag);
  if (i === -1) return undefined;
  return args[i + 1];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iaW4uanMiXSwibmFtZXMiOlsic2VydmVyIiwicmVxdWlyZSIsImxvZ0FzSFRNTCIsImxvZ1RvQ29uc29sZSIsImFyZ3YiLCJwcm9jZXNzIiwic3BsaWNlIiwiaG9zdCIsImdldFZhbHVlRm9yRmxhZyIsImVudiIsInBvcnQiLCJzdGFydCIsImNvbnNvbGUiLCJsb2ciLCJzdG9wIiwiYWRkTG9nZ2VyIiwidXJsIiwiYmluZCIsImZsYWciLCJhcmdzIiwiaSIsImluZGV4T2YiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBQ0EsSUFBTUEsU0FBU0MsUUFBUSxzQkFBUixDQUFmO0FBQ0EsSUFBTUMsWUFBWUQsUUFBUSxtQkFBUixDQUFsQjtBQUNBLElBQU1FLGVBQWVGLFFBQVEsc0JBQVIsQ0FBckI7O0FBRUEsSUFBTUcsT0FBT0MsUUFBUUQsSUFBUixDQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQWI7O0FBRUE7QUFDQSxJQUFNQyxPQUFPQyxnQkFBZ0IsSUFBaEIsRUFBc0JKLElBQXRCLEtBQStCQyxRQUFRSSxHQUFSLENBQVksc0JBQVosQ0FBL0IsSUFBc0UsSUFBbkY7QUFDQSxJQUFNQyxPQUFPRixnQkFBZ0IsSUFBaEIsRUFBc0JKLElBQXRCLEtBQStCQyxRQUFRSSxHQUFSLENBQVksc0JBQVosQ0FBL0IsSUFBc0UsSUFBbkY7O0FBRUE7O29CQUM0QlQsT0FBT1csS0FBUCxDQUFhSixJQUFiLEVBQW1CRyxJQUFuQixFQUF5QixpQkFBa0I7QUFBQSxNQUFoQkgsSUFBZ0IsU0FBaEJBLElBQWdCO0FBQUEsTUFBVkcsSUFBVSxTQUFWQSxJQUFVOztBQUNyRUUsVUFBUUMsR0FBUix5Q0FBa0ROLElBQWxELFNBQTBERyxJQUExRDtBQUNELENBRjJCLEM7O0lBQXBCSSxJLGlCQUFBQSxJO0lBQU1DLFMsaUJBQUFBLFM7OztBQUlkQSxVQUFVYixTQUFWLEVBQXFCQyxZQUFyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQVksVUFBVSxnQkFBdUI7QUFBQSxNQUFyQlIsSUFBcUIsUUFBckJBLElBQXFCO0FBQUEsTUFBZkcsSUFBZSxRQUFmQSxJQUFlO0FBQUEsTUFBVE0sR0FBUyxRQUFUQSxHQUFTOztBQUMvQixNQUFJQSxRQUFRLGlCQUFaLEVBQStCO0FBQzdCSixZQUFRQyxHQUFSLFlBQXFCTixJQUFyQixTQUE2QkcsSUFBN0I7QUFDQUksU0FBS0YsUUFBUUMsR0FBUixDQUFZSSxJQUFaLENBQWlCTCxRQUFRQyxHQUF6QixhQUF1Q04sSUFBdkMsU0FBK0NHLElBQS9DLHlCQUFMO0FBQ0Q7QUFDRixDQUxEOztBQU9BO0FBQ0E7QUFDQSxTQUFTRixlQUFULENBQTBCVSxJQUExQixFQUFnQ0MsSUFBaEMsRUFBc0M7QUFDcEMsTUFBTUMsSUFBSUQsS0FBS0UsT0FBTCxDQUFhSCxJQUFiLENBQVY7QUFDQSxNQUFJRSxNQUFNLENBQUMsQ0FBWCxFQUFjLE9BQU9FLFNBQVA7QUFDZCxTQUFPSCxLQUFLQyxJQUFJLENBQVQsQ0FBUDtBQUNEIiwiZmlsZSI6ImJpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICMhL3Vzci9iaW4vZW52IG5vZGVcblxuJ3VzZSBzdHJpY3QnXG4vLyBEZXBlbmRlbmNpZXNcbmNvbnN0IHNlcnZlciA9IHJlcXVpcmUoJy4vZWNoby13ZWItc2VydmVyLmpzJylcbmNvbnN0IGxvZ0FzSFRNTCA9IHJlcXVpcmUoJy4vbG9nZ2Vycy9hcy1odG1sJylcbmNvbnN0IGxvZ1RvQ29uc29sZSA9IHJlcXVpcmUoJy4vbG9nZ2Vycy90by1jb25zb2xlJylcblxuY29uc3QgYXJndiA9IHByb2Nlc3MuYXJndi5zcGxpY2UoMilcblxuLy8gRU5WIGRlZmF1bHRzXG5jb25zdCBob3N0ID0gZ2V0VmFsdWVGb3JGbGFnKCctaCcsIGFyZ3YpIHx8IHByb2Nlc3MuZW52WydFQ0hPX1dFQl9TRVJWRVJfSE9TVCddIHx8IG51bGxcbmNvbnN0IHBvcnQgPSBnZXRWYWx1ZUZvckZsYWcoJy1wJywgYXJndikgfHwgcHJvY2Vzcy5lbnZbJ0VDSE9fV0VCX1NFUlZFUl9QT1JUJ10gfHwgbnVsbFxuXG4vLyBTdGFydCB0aGUgc2VydmVyLlxuY29uc3QgeyBzdG9wLCBhZGRMb2dnZXIgfSA9IHNlcnZlci5zdGFydChob3N0LCBwb3J0LCAoe2hvc3QsIHBvcnR9KSA9PiB7XG4gIGNvbnNvbGUubG9nKGBbRVdTXSBOZXcgc2VydmVyIHJ1bm5pbmcgYXQgaHR0cDovLyR7aG9zdH06JHtwb3J0fS9gKVxufSlcblxuYWRkTG9nZ2VyKGxvZ0FzSFRNTCwgbG9nVG9Db25zb2xlKVxuXG4vLyBDcmVhdGUgYSBuZXcgbG9nZ2VyIHRoYXQgZ2l2ZXMgdXMgYSB3YXkgdG8gZ3JhY2VmdWxseSBzaHV0ZG93biB0aGUgc2VydmVyXG4vLyB3aGVuIGdpdmVuIGEgXCJzZWNyZXRcIiB1cmwuIFRoaXMgd291bGQgYmUgYSBiYWQgaWRlYSBpbiBhIHJlYWwgYXBwbGljYXRpb24sXG4vLyBidXQgaXQncyBzYWZlIGVub3VnaCBmb3IgdGVzdGluZy5cbmFkZExvZ2dlcigoe2hvc3QsIHBvcnQsIHVybH0pID0+IHtcbiAgaWYgKHVybCA9PT0gJy9zdG9wL3N0b3Avc3RvcCcpIHtcbiAgICBjb25zb2xlLmxvZyhgW0VXU10gJHtob3N0fToke3BvcnR9OiBSZWNpZXZlZCBzaHV0ZG93biByZXF1ZXN0IFwiL3N0b3Avc3RvcC9zdG9wXCJgKVxuICAgIHN0b3AoY29uc29sZS5sb2cuYmluZChjb25zb2xlLmxvZywgYFtFV1NdICR7aG9zdH06JHtwb3J0fTogSXMgc2h1dHRpbmcgZG93biFgKSlcbiAgfVxufSlcblxuLy8gUXVpY2sgaGVscGVyIGZ1bmN0aW9uIHRvIGZpbmQgYW55IHNwZWNpZmljIGNvbW1hbmQgbGluZSBmbGFncyB0aGUgdXNlciBtYXlcbi8vIGhhdmUgcGFzc2VkIGluLlxuZnVuY3Rpb24gZ2V0VmFsdWVGb3JGbGFnIChmbGFnLCBhcmdzKSB7XG4gIGNvbnN0IGkgPSBhcmdzLmluZGV4T2YoZmxhZylcbiAgaWYgKGkgPT09IC0xKSByZXR1cm4gdW5kZWZpbmVkXG4gIHJldHVybiBhcmdzW2kgKyAxXVxufVxuIl19