// #!/usr/bin/env node

'use strict';
// Dependencies

var server = require('./echo-web-server.js');
var logAsHTML = require('./loggers/as-html');
var logToConsole = require('./loggers/to-console');

var argv = process.argv.splice(2);

// ENV defaults
var host = getValueForFlag('-h', argv) || process.env['ECHO_WEB_SERVER_HOST'] || undefined;
var port = getValueForFlag('-p', argv) || process.env['ECHO_WEB_SERVER_PORT'] || undefined;

// Start the server.

var _server$start = server.start(host, port, function (_ref2) {
  var host = _ref2.host;
  var port = _ref2.port;

  console.log('[EWS] New server running at http://' + host + ':' + port + '/');
});

var stop = _server$start.stop;
var addLogger = _server$start.addLogger;


addLogger(logAsHTML, logToConsole);

// Create a new logger that gives us a way to gracefully shutdown the server
// when given a "secret" url. This would be a bad idea in a real application,
// but it's safe enough for testing.
addLogger(function (_ref) {
  var host = _ref.host;
  var port = _ref.port;
  var url = _ref.url;

  if (url === '/stop/stop/stop') {
    console.log('[EWS] ' + host + ':' + port + ': Recieved shutdown request "/stop/stop/stop"');
    stop(console.log.bind(console.log, '[EWS] ' + host + ':' + port + ': Is shutting down!'));
  }
});

// Quick helper function to find any specific command line flags the user may
// have passed in.
function getValueForFlag(flag, args) {
  var i = args.indexOf(flag);
  if (i === -1) return undefined;
  return args[i + 1];
}
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iaW4uanMiXSwibmFtZXMiOlsic2VydmVyIiwicmVxdWlyZSIsImxvZ0FzSFRNTCIsImxvZ1RvQ29uc29sZSIsImFyZ3YiLCJwcm9jZXNzIiwic3BsaWNlIiwiaG9zdCIsImdldFZhbHVlRm9yRmxhZyIsImVudiIsInVuZGVmaW5lZCIsInBvcnQiLCJzdGFydCIsImNvbnNvbGUiLCJsb2ciLCJzdG9wIiwiYWRkTG9nZ2VyIiwidXJsIiwiYmluZCIsImZsYWciLCJhcmdzIiwiaSIsImluZGV4T2YiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBQ0EsSUFBTUEsU0FBU0MsUUFBUSxzQkFBUixDQUFmO0FBQ0EsSUFBTUMsWUFBWUQsUUFBUSxtQkFBUixDQUFsQjtBQUNBLElBQU1FLGVBQWVGLFFBQVEsc0JBQVIsQ0FBckI7O0FBRUEsSUFBTUcsT0FBT0MsUUFBUUQsSUFBUixDQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQWI7O0FBRUE7QUFDQSxJQUFNQyxPQUFPQyxnQkFBZ0IsSUFBaEIsRUFBc0JKLElBQXRCLEtBQStCQyxRQUFRSSxHQUFSLENBQVksc0JBQVosQ0FBL0IsSUFBc0VDLFNBQW5GO0FBQ0EsSUFBTUMsT0FBT0gsZ0JBQWdCLElBQWhCLEVBQXNCSixJQUF0QixLQUErQkMsUUFBUUksR0FBUixDQUFZLHNCQUFaLENBQS9CLElBQXNFQyxTQUFuRjs7QUFFQTs7b0JBQzRCVixPQUFPWSxLQUFQLENBQWFMLElBQWIsRUFBbUJJLElBQW5CLEVBQXlCLGlCQUFrQjtBQUFBLE1BQWhCSixJQUFnQixTQUFoQkEsSUFBZ0I7QUFBQSxNQUFWSSxJQUFVLFNBQVZBLElBQVU7O0FBQ3JFRSxVQUFRQyxHQUFSLHlDQUFrRFAsSUFBbEQsU0FBMERJLElBQTFEO0FBQ0QsQ0FGMkIsQzs7SUFBcEJJLEksaUJBQUFBLEk7SUFBTUMsUyxpQkFBQUEsUzs7O0FBSWRBLFVBQVVkLFNBQVYsRUFBcUJDLFlBQXJCOztBQUVBO0FBQ0E7QUFDQTtBQUNBYSxVQUFVLGdCQUF1QjtBQUFBLE1BQXJCVCxJQUFxQixRQUFyQkEsSUFBcUI7QUFBQSxNQUFmSSxJQUFlLFFBQWZBLElBQWU7QUFBQSxNQUFUTSxHQUFTLFFBQVRBLEdBQVM7O0FBQy9CLE1BQUlBLFFBQVEsaUJBQVosRUFBK0I7QUFDN0JKLFlBQVFDLEdBQVIsWUFBcUJQLElBQXJCLFNBQTZCSSxJQUE3QjtBQUNBSSxTQUFLRixRQUFRQyxHQUFSLENBQVlJLElBQVosQ0FBaUJMLFFBQVFDLEdBQXpCLGFBQXVDUCxJQUF2QyxTQUErQ0ksSUFBL0MseUJBQUw7QUFDRDtBQUNGLENBTEQ7O0FBT0E7QUFDQTtBQUNBLFNBQVNILGVBQVQsQ0FBMEJXLElBQTFCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUNwQyxNQUFNQyxJQUFJRCxLQUFLRSxPQUFMLENBQWFILElBQWIsQ0FBVjtBQUNBLE1BQUlFLE1BQU0sQ0FBQyxDQUFYLEVBQWMsT0FBT1gsU0FBUDtBQUNkLFNBQU9VLEtBQUtDLElBQUksQ0FBVCxDQUFQO0FBQ0QiLCJmaWxlIjoiYmluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gIyEvdXNyL2Jpbi9lbnYgbm9kZVxyXG5cclxuJ3VzZSBzdHJpY3QnXHJcbi8vIERlcGVuZGVuY2llc1xyXG5jb25zdCBzZXJ2ZXIgPSByZXF1aXJlKCcuL2VjaG8td2ViLXNlcnZlci5qcycpXHJcbmNvbnN0IGxvZ0FzSFRNTCA9IHJlcXVpcmUoJy4vbG9nZ2Vycy9hcy1odG1sJylcclxuY29uc3QgbG9nVG9Db25zb2xlID0gcmVxdWlyZSgnLi9sb2dnZXJzL3RvLWNvbnNvbGUnKVxyXG5cclxuY29uc3QgYXJndiA9IHByb2Nlc3MuYXJndi5zcGxpY2UoMilcclxuXHJcbi8vIEVOViBkZWZhdWx0c1xyXG5jb25zdCBob3N0ID0gZ2V0VmFsdWVGb3JGbGFnKCctaCcsIGFyZ3YpIHx8IHByb2Nlc3MuZW52WydFQ0hPX1dFQl9TRVJWRVJfSE9TVCddIHx8IHVuZGVmaW5lZFxyXG5jb25zdCBwb3J0ID0gZ2V0VmFsdWVGb3JGbGFnKCctcCcsIGFyZ3YpIHx8IHByb2Nlc3MuZW52WydFQ0hPX1dFQl9TRVJWRVJfUE9SVCddIHx8IHVuZGVmaW5lZFxyXG5cclxuLy8gU3RhcnQgdGhlIHNlcnZlci5cclxuY29uc3QgeyBzdG9wLCBhZGRMb2dnZXIgfSA9IHNlcnZlci5zdGFydChob3N0LCBwb3J0LCAoe2hvc3QsIHBvcnR9KSA9PiB7XHJcbiAgY29uc29sZS5sb2coYFtFV1NdIE5ldyBzZXJ2ZXIgcnVubmluZyBhdCBodHRwOi8vJHtob3N0fToke3BvcnR9L2ApXHJcbn0pXHJcblxyXG5hZGRMb2dnZXIobG9nQXNIVE1MLCBsb2dUb0NvbnNvbGUpXHJcblxyXG4vLyBDcmVhdGUgYSBuZXcgbG9nZ2VyIHRoYXQgZ2l2ZXMgdXMgYSB3YXkgdG8gZ3JhY2VmdWxseSBzaHV0ZG93biB0aGUgc2VydmVyXHJcbi8vIHdoZW4gZ2l2ZW4gYSBcInNlY3JldFwiIHVybC4gVGhpcyB3b3VsZCBiZSBhIGJhZCBpZGVhIGluIGEgcmVhbCBhcHBsaWNhdGlvbixcclxuLy8gYnV0IGl0J3Mgc2FmZSBlbm91Z2ggZm9yIHRlc3RpbmcuXHJcbmFkZExvZ2dlcigoe2hvc3QsIHBvcnQsIHVybH0pID0+IHtcclxuICBpZiAodXJsID09PSAnL3N0b3Avc3RvcC9zdG9wJykge1xyXG4gICAgY29uc29sZS5sb2coYFtFV1NdICR7aG9zdH06JHtwb3J0fTogUmVjaWV2ZWQgc2h1dGRvd24gcmVxdWVzdCBcIi9zdG9wL3N0b3Avc3RvcFwiYClcclxuICAgIHN0b3AoY29uc29sZS5sb2cuYmluZChjb25zb2xlLmxvZywgYFtFV1NdICR7aG9zdH06JHtwb3J0fTogSXMgc2h1dHRpbmcgZG93biFgKSlcclxuICB9XHJcbn0pXHJcblxyXG4vLyBRdWljayBoZWxwZXIgZnVuY3Rpb24gdG8gZmluZCBhbnkgc3BlY2lmaWMgY29tbWFuZCBsaW5lIGZsYWdzIHRoZSB1c2VyIG1heVxyXG4vLyBoYXZlIHBhc3NlZCBpbi5cclxuZnVuY3Rpb24gZ2V0VmFsdWVGb3JGbGFnIChmbGFnLCBhcmdzKSB7XHJcbiAgY29uc3QgaSA9IGFyZ3MuaW5kZXhPZihmbGFnKVxyXG4gIGlmIChpID09PSAtMSkgcmV0dXJuIHVuZGVmaW5lZFxyXG4gIHJldHVybiBhcmdzW2kgKyAxXVxyXG59XHJcbiJdfQ==
=======
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iaW4uanMiXSwibmFtZXMiOlsic2VydmVyIiwicmVxdWlyZSIsImxvZ0FzSFRNTCIsImxvZ1RvQ29uc29sZSIsImFyZ3YiLCJwcm9jZXNzIiwic3BsaWNlIiwiaG9zdCIsImdldFZhbHVlRm9yRmxhZyIsImVudiIsInVuZGVmaW5lZCIsInBvcnQiLCJzdGFydCIsImNvbnNvbGUiLCJsb2ciLCJzdG9wIiwiYWRkTG9nZ2VyIiwidXJsIiwiYmluZCIsImZsYWciLCJhcmdzIiwiaSIsImluZGV4T2YiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBQ0EsSUFBTUEsU0FBU0MsUUFBUSxzQkFBUixDQUFmO0FBQ0EsSUFBTUMsWUFBWUQsUUFBUSxtQkFBUixDQUFsQjtBQUNBLElBQU1FLGVBQWVGLFFBQVEsc0JBQVIsQ0FBckI7O0FBRUEsSUFBTUcsT0FBT0MsUUFBUUQsSUFBUixDQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQWI7O0FBRUE7QUFDQSxJQUFNQyxPQUFPQyxnQkFBZ0IsSUFBaEIsRUFBc0JKLElBQXRCLEtBQStCQyxRQUFRSSxHQUFSLENBQVksc0JBQVosQ0FBL0IsSUFBc0VDLFNBQW5GO0FBQ0EsSUFBTUMsT0FBT0gsZ0JBQWdCLElBQWhCLEVBQXNCSixJQUF0QixLQUErQkMsUUFBUUksR0FBUixDQUFZLHNCQUFaLENBQS9CLElBQXNFQyxTQUFuRjs7QUFFQTs7b0JBQzRCVixPQUFPWSxLQUFQLENBQWFMLElBQWIsRUFBbUJJLElBQW5CLEVBQXlCLGlCQUFrQjtBQUFBLE1BQWhCSixJQUFnQixTQUFoQkEsSUFBZ0I7QUFBQSxNQUFWSSxJQUFVLFNBQVZBLElBQVU7O0FBQ3JFRSxVQUFRQyxHQUFSLHlDQUFrRFAsSUFBbEQsU0FBMERJLElBQTFEO0FBQ0QsQ0FGMkIsQzs7SUFBcEJJLEksaUJBQUFBLEk7SUFBTUMsUyxpQkFBQUEsUzs7O0FBSWRBLFVBQVVkLFNBQVYsRUFBcUJDLFlBQXJCOztBQUVBO0FBQ0E7QUFDQTtBQUNBYSxVQUFVLGdCQUF1QjtBQUFBLE1BQXJCVCxJQUFxQixRQUFyQkEsSUFBcUI7QUFBQSxNQUFmSSxJQUFlLFFBQWZBLElBQWU7QUFBQSxNQUFUTSxHQUFTLFFBQVRBLEdBQVM7O0FBQy9CLE1BQUlBLFFBQVEsaUJBQVosRUFBK0I7QUFDN0JKLFlBQVFDLEdBQVIsWUFBcUJQLElBQXJCLFNBQTZCSSxJQUE3QjtBQUNBSSxTQUFLRixRQUFRQyxHQUFSLENBQVlJLElBQVosQ0FBaUJMLFFBQVFDLEdBQXpCLGFBQXVDUCxJQUF2QyxTQUErQ0ksSUFBL0MseUJBQUw7QUFDRDtBQUNGLENBTEQ7O0FBT0E7QUFDQTtBQUNBLFNBQVNILGVBQVQsQ0FBMEJXLElBQTFCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUNwQyxNQUFNQyxJQUFJRCxLQUFLRSxPQUFMLENBQWFILElBQWIsQ0FBVjtBQUNBLE1BQUlFLE1BQU0sQ0FBQyxDQUFYLEVBQWMsT0FBT1gsU0FBUDtBQUNkLFNBQU9VLEtBQUtDLElBQUksQ0FBVCxDQUFQO0FBQ0QiLCJmaWxlIjoiYmluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG4ndXNlIHN0cmljdCdcbi8vIERlcGVuZGVuY2llc1xuY29uc3Qgc2VydmVyID0gcmVxdWlyZSgnLi9lY2hvLXdlYi1zZXJ2ZXIuanMnKVxuY29uc3QgbG9nQXNIVE1MID0gcmVxdWlyZSgnLi9sb2dnZXJzL2FzLWh0bWwnKVxuY29uc3QgbG9nVG9Db25zb2xlID0gcmVxdWlyZSgnLi9sb2dnZXJzL3RvLWNvbnNvbGUnKVxuXG5jb25zdCBhcmd2ID0gcHJvY2Vzcy5hcmd2LnNwbGljZSgyKVxuXG4vLyBFTlYgZGVmYXVsdHNcbmNvbnN0IGhvc3QgPSBnZXRWYWx1ZUZvckZsYWcoJy1oJywgYXJndikgfHwgcHJvY2Vzcy5lbnZbJ0VDSE9fV0VCX1NFUlZFUl9IT1NUJ10gfHwgdW5kZWZpbmVkXG5jb25zdCBwb3J0ID0gZ2V0VmFsdWVGb3JGbGFnKCctcCcsIGFyZ3YpIHx8IHByb2Nlc3MuZW52WydFQ0hPX1dFQl9TRVJWRVJfUE9SVCddIHx8IHVuZGVmaW5lZFxuXG4vLyBTdGFydCB0aGUgc2VydmVyLlxuY29uc3QgeyBzdG9wLCBhZGRMb2dnZXIgfSA9IHNlcnZlci5zdGFydChob3N0LCBwb3J0LCAoe2hvc3QsIHBvcnR9KSA9PiB7XG4gIGNvbnNvbGUubG9nKGBbRVdTXSBOZXcgc2VydmVyIHJ1bm5pbmcgYXQgaHR0cDovLyR7aG9zdH06JHtwb3J0fS9gKVxufSlcblxuYWRkTG9nZ2VyKGxvZ0FzSFRNTCwgbG9nVG9Db25zb2xlKVxuXG4vLyBDcmVhdGUgYSBuZXcgbG9nZ2VyIHRoYXQgZ2l2ZXMgdXMgYSB3YXkgdG8gZ3JhY2VmdWxseSBzaHV0ZG93biB0aGUgc2VydmVyXG4vLyB3aGVuIGdpdmVuIGEgXCJzZWNyZXRcIiB1cmwuIFRoaXMgd291bGQgYmUgYSBiYWQgaWRlYSBpbiBhIHJlYWwgYXBwbGljYXRpb24sXG4vLyBidXQgaXQncyBzYWZlIGVub3VnaCBmb3IgdGVzdGluZy5cbmFkZExvZ2dlcigoe2hvc3QsIHBvcnQsIHVybH0pID0+IHtcbiAgaWYgKHVybCA9PT0gJy9zdG9wL3N0b3Avc3RvcCcpIHtcbiAgICBjb25zb2xlLmxvZyhgW0VXU10gJHtob3N0fToke3BvcnR9OiBSZWNpZXZlZCBzaHV0ZG93biByZXF1ZXN0IFwiL3N0b3Avc3RvcC9zdG9wXCJgKVxuICAgIHN0b3AoY29uc29sZS5sb2cuYmluZChjb25zb2xlLmxvZywgYFtFV1NdICR7aG9zdH06JHtwb3J0fTogSXMgc2h1dHRpbmcgZG93biFgKSlcbiAgfVxufSlcblxuLy8gUXVpY2sgaGVscGVyIGZ1bmN0aW9uIHRvIGZpbmQgYW55IHNwZWNpZmljIGNvbW1hbmQgbGluZSBmbGFncyB0aGUgdXNlciBtYXlcbi8vIGhhdmUgcGFzc2VkIGluLlxuZnVuY3Rpb24gZ2V0VmFsdWVGb3JGbGFnIChmbGFnLCBhcmdzKSB7XG4gIGNvbnN0IGkgPSBhcmdzLmluZGV4T2YoZmxhZylcbiAgaWYgKGkgPT09IC0xKSByZXR1cm4gdW5kZWZpbmVkXG4gIHJldHVybiBhcmdzW2kgKyAxXVxufVxuIl19
>>>>>>> d797919a79be490384a6479be3655a12750eab27
