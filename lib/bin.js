// #!/usr/bin/env node

'use strict';
// Dependencies

var server = require('./server.js');
var logAsHTML = require('./loggers/as-html');
var logToConsole = require('./loggers/to-console');

var argv = process.argv.splice(2);

// ENV defaults
var host = getValueForFlag('-h', argv) || process.env['ECHO_WEB_SERVER_HOST'] || undefined;
var port = getValueForFlag('-p', argv) || process.env['ECHO_WEB_SERVER_PORT'] || undefined;

// Start the server.

var _server$start = server.start(host, port, function (_ref2) {
  var host = _ref2.host;
  var port = _ref2.port;

  console.log('[EWS] New server running at http://' + host + ':' + port + '/');
});

var stop = _server$start.stop;
var addLogger = _server$start.addLogger;


addLogger(logAsHTML, logToConsole);

// Create a new logger that gives us a way to gracefully shutdown the server
// when given a "secret" url. This would be a bad idea in a real application,
// but it's safe enough for testing.
addLogger(function (_ref) {
  var host = _ref.host;
  var port = _ref.port;
  var url = _ref.url;

  if (url === '/stop/stop/stop') {
    console.log('[EWS] ' + host + ':' + port + ': Recieved shutdown request "/stop/stop/stop"');
    stop(console.log.bind(console.log, '[EWS] ' + host + ':' + port + ': Is shutting down!'));
  }
});

// Quick helper function to find any specific command line flags the user may
// have passed in.
function getValueForFlag(flag, args) {
  var i = args.indexOf(flag);
  if (i === -1) return undefined;
  return args[i + 1];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iaW4uanMiXSwibmFtZXMiOlsic2VydmVyIiwicmVxdWlyZSIsImxvZ0FzSFRNTCIsImxvZ1RvQ29uc29sZSIsImFyZ3YiLCJwcm9jZXNzIiwic3BsaWNlIiwiaG9zdCIsImdldFZhbHVlRm9yRmxhZyIsImVudiIsInVuZGVmaW5lZCIsInBvcnQiLCJzdGFydCIsImNvbnNvbGUiLCJsb2ciLCJzdG9wIiwiYWRkTG9nZ2VyIiwidXJsIiwiYmluZCIsImZsYWciLCJhcmdzIiwiaSIsImluZGV4T2YiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBQ0EsSUFBTUEsU0FBU0MsUUFBUSxhQUFSLENBQWY7QUFDQSxJQUFNQyxZQUFZRCxRQUFRLG1CQUFSLENBQWxCO0FBQ0EsSUFBTUUsZUFBZUYsUUFBUSxzQkFBUixDQUFyQjs7QUFFQSxJQUFNRyxPQUFPQyxRQUFRRCxJQUFSLENBQWFFLE1BQWIsQ0FBb0IsQ0FBcEIsQ0FBYjs7QUFFQTtBQUNBLElBQU1DLE9BQU9DLGdCQUFnQixJQUFoQixFQUFzQkosSUFBdEIsS0FBK0JDLFFBQVFJLEdBQVIsQ0FBWSxzQkFBWixDQUEvQixJQUFzRUMsU0FBbkY7QUFDQSxJQUFNQyxPQUFPSCxnQkFBZ0IsSUFBaEIsRUFBc0JKLElBQXRCLEtBQStCQyxRQUFRSSxHQUFSLENBQVksc0JBQVosQ0FBL0IsSUFBc0VDLFNBQW5GOztBQUVBOztvQkFDNEJWLE9BQU9ZLEtBQVAsQ0FBYUwsSUFBYixFQUFtQkksSUFBbkIsRUFBeUIsaUJBQWtCO0FBQUEsTUFBaEJKLElBQWdCLFNBQWhCQSxJQUFnQjtBQUFBLE1BQVZJLElBQVUsU0FBVkEsSUFBVTs7QUFDckVFLFVBQVFDLEdBQVIseUNBQWtEUCxJQUFsRCxTQUEwREksSUFBMUQ7QUFDRCxDQUYyQixDOztJQUFwQkksSSxpQkFBQUEsSTtJQUFNQyxTLGlCQUFBQSxTOzs7QUFJZEEsVUFBVWQsU0FBVixFQUFxQkMsWUFBckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0FhLFVBQVUsZ0JBQXVCO0FBQUEsTUFBckJULElBQXFCLFFBQXJCQSxJQUFxQjtBQUFBLE1BQWZJLElBQWUsUUFBZkEsSUFBZTtBQUFBLE1BQVRNLEdBQVMsUUFBVEEsR0FBUzs7QUFDL0IsTUFBSUEsUUFBUSxpQkFBWixFQUErQjtBQUM3QkosWUFBUUMsR0FBUixZQUFxQlAsSUFBckIsU0FBNkJJLElBQTdCO0FBQ0FJLFNBQUtGLFFBQVFDLEdBQVIsQ0FBWUksSUFBWixDQUFpQkwsUUFBUUMsR0FBekIsYUFBdUNQLElBQXZDLFNBQStDSSxJQUEvQyx5QkFBTDtBQUNEO0FBQ0YsQ0FMRDs7QUFPQTtBQUNBO0FBQ0EsU0FBU0gsZUFBVCxDQUEwQlcsSUFBMUIsRUFBZ0NDLElBQWhDLEVBQXNDO0FBQ3BDLE1BQU1DLElBQUlELEtBQUtFLE9BQUwsQ0FBYUgsSUFBYixDQUFWO0FBQ0EsTUFBSUUsTUFBTSxDQUFDLENBQVgsRUFBYyxPQUFPWCxTQUFQO0FBQ2QsU0FBT1UsS0FBS0MsSUFBSSxDQUFULENBQVA7QUFDRCIsImZpbGUiOiJiaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAjIS91c3IvYmluL2VudiBub2RlXG5cbid1c2Ugc3RyaWN0J1xuLy8gRGVwZW5kZW5jaWVzXG5jb25zdCBzZXJ2ZXIgPSByZXF1aXJlKCcuL3NlcnZlci5qcycpXG5jb25zdCBsb2dBc0hUTUwgPSByZXF1aXJlKCcuL2xvZ2dlcnMvYXMtaHRtbCcpXG5jb25zdCBsb2dUb0NvbnNvbGUgPSByZXF1aXJlKCcuL2xvZ2dlcnMvdG8tY29uc29sZScpXG5cbmNvbnN0IGFyZ3YgPSBwcm9jZXNzLmFyZ3Yuc3BsaWNlKDIpXG5cbi8vIEVOViBkZWZhdWx0c1xuY29uc3QgaG9zdCA9IGdldFZhbHVlRm9yRmxhZygnLWgnLCBhcmd2KSB8fCBwcm9jZXNzLmVudlsnRUNIT19XRUJfU0VSVkVSX0hPU1QnXSB8fCB1bmRlZmluZWRcbmNvbnN0IHBvcnQgPSBnZXRWYWx1ZUZvckZsYWcoJy1wJywgYXJndikgfHwgcHJvY2Vzcy5lbnZbJ0VDSE9fV0VCX1NFUlZFUl9QT1JUJ10gfHwgdW5kZWZpbmVkXG5cbi8vIFN0YXJ0IHRoZSBzZXJ2ZXIuXG5jb25zdCB7IHN0b3AsIGFkZExvZ2dlciB9ID0gc2VydmVyLnN0YXJ0KGhvc3QsIHBvcnQsICh7aG9zdCwgcG9ydH0pID0+IHtcbiAgY29uc29sZS5sb2coYFtFV1NdIE5ldyBzZXJ2ZXIgcnVubmluZyBhdCBodHRwOi8vJHtob3N0fToke3BvcnR9L2ApXG59KVxuXG5hZGRMb2dnZXIobG9nQXNIVE1MLCBsb2dUb0NvbnNvbGUpXG5cbi8vIENyZWF0ZSBhIG5ldyBsb2dnZXIgdGhhdCBnaXZlcyB1cyBhIHdheSB0byBncmFjZWZ1bGx5IHNodXRkb3duIHRoZSBzZXJ2ZXJcbi8vIHdoZW4gZ2l2ZW4gYSBcInNlY3JldFwiIHVybC4gVGhpcyB3b3VsZCBiZSBhIGJhZCBpZGVhIGluIGEgcmVhbCBhcHBsaWNhdGlvbixcbi8vIGJ1dCBpdCdzIHNhZmUgZW5vdWdoIGZvciB0ZXN0aW5nLlxuYWRkTG9nZ2VyKCh7aG9zdCwgcG9ydCwgdXJsfSkgPT4ge1xuICBpZiAodXJsID09PSAnL3N0b3Avc3RvcC9zdG9wJykge1xuICAgIGNvbnNvbGUubG9nKGBbRVdTXSAke2hvc3R9OiR7cG9ydH06IFJlY2lldmVkIHNodXRkb3duIHJlcXVlc3QgXCIvc3RvcC9zdG9wL3N0b3BcImApXG4gICAgc3RvcChjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUubG9nLCBgW0VXU10gJHtob3N0fToke3BvcnR9OiBJcyBzaHV0dGluZyBkb3duIWApKVxuICB9XG59KVxuXG4vLyBRdWljayBoZWxwZXIgZnVuY3Rpb24gdG8gZmluZCBhbnkgc3BlY2lmaWMgY29tbWFuZCBsaW5lIGZsYWdzIHRoZSB1c2VyIG1heVxuLy8gaGF2ZSBwYXNzZWQgaW4uXG5mdW5jdGlvbiBnZXRWYWx1ZUZvckZsYWcgKGZsYWcsIGFyZ3MpIHtcbiAgY29uc3QgaSA9IGFyZ3MuaW5kZXhPZihmbGFnKVxuICBpZiAoaSA9PT0gLTEpIHJldHVybiB1bmRlZmluZWRcbiAgcmV0dXJuIGFyZ3NbaSArIDFdXG59XG4iXX0=