{"version":3,"sources":["../../src/utils/escape-html.js"],"names":[],"mappings":";;;;AAAA,IAAM,oB;AACJ,CAAE,CAAC,IAAD,EAAS,OAAT,CAAF,EACE,CAAC,IAAD,EAAS,MAAT,CADF,EAEE,CAAC,IAAD,EAAS,MAAT,CAFF,EAGE,CAAC,IAAD,EAAS,QAAT,CAHF,EAIE,CAAC,IAAD,EAAS,QAAT,C;AAJF,EAKE,CAAC,KAAD,EAAS,SAAT,C;AALF,CADF;;;;;;;AAcA,OAAO,OAAP,GAAiB,UAAC,GAAD,EAAS;AACxB,SAAO,kBAAkB,MAAlB,CAAyB,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,EAAE,OAAF,6BAAa,CAAb,EAAV;AAAA,GAAzB,EAAoD,GAApD,CAAP;AACD,CAFD","file":"escape-html.js","sourcesContent":["const specialCharacters = // [[regexp of character to match, entity to replace with]]\n  [ [/&/g  , '&amp;']\n  , [/>/g  , '&gt;']\n  , [/</g  , '&lt;']\n  , [/\"/g  , '&quot;']\n  , [/'/g  , '&apos;'] // '&#39;'\n  , [/\\`/g , '&grave;'] // '&#96;'\n  ]\n\n/**\n * Properly escapes HTML tags and special characters to prevent mischief.\n * @param {string} str - A string that we don't want to contain any HTML.\n * @return {string} - A string that no longer contains any HTML.\n */\nmodule.exports = (str) => {\n  return specialCharacters.reduce((p, c) => p.replace(...c), str)\n}\n"]}