{"version":3,"sources":["../src/echo-web-server.js"],"names":[],"mappings":";;;;;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;;;AAGA,IAAM,UAAU,EAAhB;AACA,UAAU,SAAV;AACA,UAAU,MAAV;;;AAGA,OAAO,OAAP,GAAiB,EAAE,YAAF;AACE,sBADF;AAEE,gBAFF;AAGE;AAHF,CAAjB;;;;;;;;;;AAeA,SAAS,KAAT,GAA2D;AAAA,MAA3C,IAA2C,yDAApC,MAAoC;AAAA,MAA5B,IAA4B,yDAArB,SAAqB;AAAA,MAAV,QAAU;;;AAEzD,MAAI,SAAS,MAAb,EAAqB,OAAO,CAAP;;;AAGrB,MAAM,SAAS,KAAK,YAAL,CAAkB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC7C,QAAM,cAAc,OAAO,MAAP,CAAc,EAAE,QAAF,EAAO,UAAP,EAAa,UAAb;AACE,cAAS,IAAI,UAAJ,CAAe,aAD1B;AAEE,WAAS,UAAU,IAAI,GAAd;AAFX,KAAd,CAApB;AAIA,QAAI,UAAJ,GAAiB,GAAjB;AACA,QAAI,SAAJ,CAAc,eAAd,EAA+B,UAA/B;AACA,YAAQ,OAAR,CAAgB,UAAC,GAAD;AAAA,aAAS,IAAI,WAAJ,CAAT;AAAA,KAAhB;AACA,QAAI,GAAJ;AACD,GATc,CAAf;;AAWA,SAAO,MAAP,CAAc,IAAd,EAAoB,IAApB,EAA0B,YAAM;AAC9B,WAAO,OAAO,OAAP,GAAiB,OAAxB;AACA,WAAO,OAAO,OAAP,GAAiB,IAAxB;AACA,gBAAY,SAAS,EAAE,UAAF,EAAQ,UAAR,EAAc,SAAS,IAAvB,EAAT,CAAZ;AACD,GAJD;;AAMA,SAAO,UAAC,QAAD,EAAc;AACnB,YAAQ,UAAR,IAAsB,QAAQ,UAAR,EAAtB;AACA,WAAO,SAAP,IAAoB,OAAO,KAAP,CAAa,QAAb,CAApB;AACD,GAHD;AAID;;;;;;AAMD,SAAS,SAAT,CAAoB,MAApB,EAA4B;AAC1B,UAAQ,IAAR,CAAa,MAAb;AACD;;;;;;;;;;AAaD,SAAS,SAAT,OAAqC;AAAA,MAAf,MAAe,QAAf,MAAe;AAAA,MAAP,GAAO,QAAP,GAAO;;AACnC,UAAQ,GAAR,cAAuB,MAAvB,qBAA6C,GAA7C;AACD;;;;;;;;;;AAWD,SAAS,MAAT,QAA2C;AAAA,MAAxB,IAAwB,SAAxB,IAAwB;AAAA,MAAlB,IAAkB,SAAlB,IAAkB;AAAA,MAAZ,GAAY,SAAZ,GAAY;AAAA,MAAP,GAAO,SAAP,GAAO;;AACzC,MAAM,aAAa,SAAb,UAAa,CAAC,GAAD;AAAA,WACX,CAAE,CAAC,IAAD,EAAO,OAAP,CAAF,EACE,CAAC,IAAD,EAAO,MAAP,CADF,EAEE,CAAC,IAAD,EAAO,MAAP,CAFF,EAGE,CAAC,IAAD,EAAO,QAAP,CAHF,EAIE,CAAC,IAAD,EAAO,OAAP,CAJF,EAKE,CAAC,KAAD,EAAQ,OAAR,CALF,EAME,MANF,CAMS,UAAC,CAAD,EAAI,CAAJ;AAAA,aAAU,EAAE,OAAF,6BAAa,CAAb,EAAV;AAAA,KANT,EAMoC,GANpC,CADW;AAAA,GAAnB;;AASA,MAAM,2hBAoBiB,uBAAqB,IAArB,SAA6B,IAA7B,GAAoC,GAApC,CApBjB,iCAAN,C;;;AA0BA,MAAI,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AACA,MAAI,KAAJ,CAAU,kBAAV;AACD","file":"echo-web-server.js","sourcesContent":["// Dependencies\nconst http = require('http')\n\n// Default Loggers\nconst loggers = []\naddLogger(toConsole)\naddLogger(asHTML)\n\n// Exports\nmodule.exports = { start\n                 , toConsole\n                 , asHTML\n                 , addLogger\n                 }\n\n\n// Server =====================================================================\n\n/**\n * Starts a server at the port and host indicated.\n * @param {string} [port='8080'] - Open port or 'auto' to assign a random free port.\n * @param {string} [host='0.0.0.0'] - IP or host name\n * @returns {function} - Stop this server then execute an optional callback function.\n */\nfunction start (port = '8080', host = '0.0.0.0', callback) {\n  // Handle special case for an auto-port.\n  if (port === 'auto') port = 0\n\n  // Create the server we're starting.\n  const server = http.createServer((req, res) => {\n    const requestInfo = Object.freeze({ res, host, port\n                                      , client : req.connection.remoteAddress\n                                      , url    : decodeURI(req.url)\n                                      })\n    res.statusCode = 404\n    res.setHeader('Cache-Control', 'no-cache')\n    loggers.forEach((log) => log(requestInfo))\n    res.end()\n  })\n\n  server.listen(port, host, () => {\n    host = server.address().address\n    port = server.address().port\n    callback && callback({ host, port, running: true })\n  })\n\n  return (callback) => {\n    process.disconnect && process.disconnect()\n    server.listening && server.close(callback)\n  }\n}\n\n/**\n * Adds a logging function that will automatically be notified of new\n * requests.\n */\nfunction addLogger (logger) {\n  loggers.push(logger)\n}\n\n\n\n\n// Loggers ====================================================================\n\n/**\n * Logs request information to the console.\n * @param {Object} requestInfo        - Logging info for the the request.\n * @param {string} requestInfo.client - The IP address for the client.\n * @param {string} requestInfo.url    - The path requested by the client.\n */\nfunction toConsole ({ client, url }) {\n  console.log(`Client [${client}] Requested: ${url}`)\n}\n\n\n/**\n * Renders HTML summary of the request for the client.\n * @param {Object} requestInfo       - Logging info for the the request.\n * @param {string} requestInfo.host  - Servers host or IP address.\n * @param {string} requestInfo.port  - Port the server is listening on.\n * @param {string} requestInfo.url   - The path requested by the client.\n * @param {object} requestInfo.res   - The server response object that will recieve the HTML.\n */\nfunction asHTML ({ host, port, url, res }) {\n  const escapeHTML = (str) =>\n          [ [/&/g, '&amp;']\n          , [/>/g, '&gt;']\n          , [/</g, '&lt;']\n          , [/\"/g, '&quot;']\n          , [/'/g, '&#39;']\n          , [/\\`/g, '&#96;']\n          ].reduce((p, c) => p.replace(...c), str)\n\n  const HTMLTemplateString = `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Echo Web Server</title>\n    <style>\n      #sent, #received {\n        margin-left: 2.5em;\n      }\n    </style>\n    <script>\n      window.addEventListener(\"load\", function (event) {\n        document.getElementById(\"sent\").textContent = decodeURI(document.URL)\n      });\n    </script>\n  </head>\n  <body>\n    <p>You sent the request:</p>\n    <pre id=\"sent\"></pre>\n    <p>I saw the request:</p>\n    <pre id=\"received\">${escapeHTML(`http://${host}:${port}${url}`)}</pre>\n  </body>\n</html>\n` // END HTMLTemplateString\n\n  // Send HTML to client\n  res.setHeader('Content-Type', 'text/html')\n  res.write(HTMLTemplateString)\n}\n"]}