{"version":3,"sources":["../src/echo-web-server.js"],"names":[],"mappings":";;;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,SAAS,QAAQ,mBAAR,CAAf;AACA,IAAM,YAAY,QAAQ,sBAAR,CAAlB;;;AAGA,IAAM,UAAU,EAAhB;AACA,UAAU,SAAV;AACA,UAAU,MAAV;;;AAGA,OAAO,OAAP,GAAiB,EAAE,YAAF;AACE,sBADF;AAEE,gBAFF;AAGE;AAHF,CAAjB;;;;;;;;;;AAeA,SAAS,KAAT,GAA2D;AAAA,MAA3C,IAA2C,yDAApC,MAAoC;AAAA,MAA5B,IAA4B,yDAArB,SAAqB;AAAA,MAAV,QAAU;;;AAEzD,MAAI,SAAS,MAAb,EAAqB,OAAO,CAAP;;;AAGrB,MAAM,SAAS,KAAK,YAAL,CAAkB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC7C,QAAM,cAAc,OAAO,MAAP,CAAc,EAAE,QAAF,EAAO,UAAP,EAAa,UAAb;AACE,cAAS,IAAI,UAAJ,CAAe,aAD1B;AAEE,WAAS,UAAU,IAAI,GAAd;AAFX,KAAd,CAApB;AAIA,QAAI,UAAJ,GAAiB,GAAjB;AACA,QAAI,SAAJ,CAAc,eAAd,EAA+B,UAA/B;AACA,QAAI,SAAJ,CAAc,YAAd,EAA4B,OAA5B;AACA,YAAQ,OAAR,CAAgB,UAAC,GAAD;AAAA,aAAS,IAAI,WAAJ,CAAT;AAAA,KAAhB;AACA,QAAI,GAAJ;AACD,GAVc,CAAf;;AAYA,SAAO,MAAP,CAAc,IAAd,EAAoB,IAApB,EAA0B,YAAM;AAC9B,WAAO,OAAO,OAAP,GAAiB,OAAxB;AACA,WAAO,OAAO,OAAP,GAAiB,IAAxB;AACA,gBAAY,SAAS,EAAE,UAAF,EAAQ,UAAR,EAAc,SAAS,IAAvB,EAAT,CAAZ;AACD,GAJD;;AAMA,SAAO,UAAC,QAAD,EAAc;AACnB,YAAQ,UAAR,IAAsB,QAAQ,UAAR,EAAtB;AACA,WAAO,SAAP,IAAoB,OAAO,KAAP,CAAa,QAAb,CAApB;AACD,GAHD;AAID;;;;;;AAMD,SAAS,SAAT,CAAoB,MAApB,EAA4B;AAC1B,UAAQ,IAAR,CAAa,MAAb;AACD","file":"echo-web-server.js","sourcesContent":["// Dependencies\nconst http = require('http')\nconst asHTML = require('./loggers/as-html')\nconst toConsole = require('./loggers/to-console')\n\n// Default Loggers\nconst loggers = []\naddLogger(toConsole)\naddLogger(asHTML)\n\n// Exports\nmodule.exports = { start\n                 , toConsole\n                 , asHTML\n                 , addLogger\n                 }\n\n\n// Server =====================================================================\n\n/**\n * Starts a server at the port and host indicated.\n * @param {string} [port='8080'] - Open port or 'auto' to assign a random free port.\n * @param {string} [host='0.0.0.0'] - IP or host name\n * @returns {function} - Stop this server then execute an optional callback function.\n */\nfunction start (port = '8080', host = '0.0.0.0', callback) {\n  // Handle special case for an auto-port.\n  if (port === 'auto') port = 0\n\n  // Create the server we're starting.\n  const server = http.createServer((req, res) => {\n    const requestInfo = Object.freeze({ res, host, port\n                                      , client : req.connection.remoteAddress\n                                      , url    : decodeURI(req.url)\n                                      })\n    res.statusCode = 404\n    res.setHeader('Cache-Control', 'no-cache')\n    res.setHeader('Connection', 'close')\n    loggers.forEach((log) => log(requestInfo))\n    res.end()\n  })\n\n  server.listen(port, host, () => {\n    host = server.address().address\n    port = server.address().port\n    callback && callback({ host, port, running: true })\n  })\n\n  return (callback) => {\n    process.disconnect && process.disconnect()\n    server.listening && server.close(callback)\n  }\n}\n\n/**\n * Adds a logging function that will automatically be notified of new\n * requests.\n */\nfunction addLogger (logger) {\n  loggers.push(logger)\n}\n"]}