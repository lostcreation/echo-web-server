{"version":3,"sources":["../src/echo-web-server.js"],"names":[],"mappings":"AAAA;;;;AAGA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,SAAS,QAAQ,mBAAR,CAAf;AACA,IAAM,YAAY,QAAQ,sBAAR,CAAlB;;;AAGA,OAAO,OAAP,GAAiB;AACf;AADe,CAAjB;;;;;;;;;;AAYA,SAAS,KAAT,GAA+D;AAAA,mEAAJ,EAAI;;AAAA,uBAA9C,IAA8C;AAAA,MAA9C,IAA8C,6BAAvC,MAAuC;AAAA,uBAA/B,IAA+B;AAAA,MAA/B,IAA+B,6BAAxB,SAAwB;AAAA,MAAb,KAAa,QAAb,KAAa;;;AAE7D,MAAI,SAAS,MAAb,EAAqB,OAAO,CAAP;;;AAGrB,MAAM,UAAU,CAAE,SAAF,EAAa,MAAb,CAAhB;;;AAGA,MAAM,SAAS,KAAK,YAAL,CAAkB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC7C,QAAM,cAAc,OAAO,MAAP,CAAc,EAAE,QAAF,EAAO,UAAP,EAAa,UAAb;AAChC,cAAQ,IAAI,UAAJ,CAAe,aADS;AAEhC,WAAK,UAAU,IAAI,GAAd;AAF2B,KAAd,CAApB;AAIA,QAAI,UAAJ,GAAiB,GAAjB;AACA,QAAI,SAAJ,CAAc,eAAd,EAA+B,UAA/B;AACA,QAAI,SAAJ,CAAc,YAAd,EAA4B,OAA5B;AACA,YAAQ,OAAR,CAAgB,UAAC,GAAD;AAAA,aAAS,IAAI,WAAJ,CAAT;AAAA,KAAhB;AACA,QAAI,GAAJ;AACD,GAVc,CAAf;;AAYA,SAAO,MAAP,CAAc,IAAd,EAAoB,IAApB,EAA0B,YAAM;AAC9B,WAAO,OAAO,OAAP,GAAiB,OAAxB;AACA,WAAO,OAAO,OAAP,GAAiB,IAAxB;AACA,aAAS,MAAM,EAAE,UAAF,EAAQ,UAAR,EAAc,SAAS,IAAvB,EAAN,CAAT;AACD,GAJD;;AAMA,SAAO;AACL,QADK,gBACC,QADD,EACW;AACd,cAAQ,UAAR,IAAsB,QAAQ,UAAR,EAAtB;AACA,aAAO,SAAP,IAAoB,OAAO,KAAP,CAAa,QAAb,CAApB;AACD,KAJI;AAKL,aALK,qBAKM,MALN,EAKc;AACjB,cAAQ,IAAR,CAAa,MAAb;AACD;AAPI,GAAP;AASD","file":"echo-web-server.js","sourcesContent":["'use strict'\r\n\r\n// Dependencies\r\nconst http = require('http')\r\nconst asHTML = require('./loggers/as-html')\r\nconst toConsole = require('./loggers/to-console')\r\n\r\n// Exports\r\nmodule.exports = {\r\n  start\r\n}\r\n\r\n/**\r\n * Starts a server at the port and host indicated.\r\n * @param {object}   options\r\n * @param {string}   [options.port='8080']    - Open port or 'auto' to assign a random free port.\r\n * @param {string}   [options.host='0.0.0.0'] - IP or host name\r\n * @param {function} [options.ready]          - Callback executed when server is ready to accept incoming connections.\r\n * @returns {object} [server]                 - Stop this server then execute an optional callback function.\r\n */\r\nfunction start ({port = '8080', host = '0.0.0.0', ready} = {}) {\r\n  // Handle special case for an auto-port.\r\n  if (port === 'auto') port = 0\r\n\r\n  // Default Loggers\r\n  const loggers = [ toConsole, asHTML ]\r\n\r\n  // Create the server we're starting.\r\n  const server = http.createServer((req, res) => {\r\n    const requestInfo = Object.freeze({ res, host, port,\r\n      client: req.connection.remoteAddress,\r\n      url: decodeURI(req.url)\r\n    })\r\n    res.statusCode = 404\r\n    res.setHeader('Cache-Control', 'no-cache')\r\n    res.setHeader('Connection', 'close')\r\n    loggers.forEach((log) => log(requestInfo))\r\n    res.end()\r\n  })\r\n\r\n  server.listen(port, host, () => {\r\n    host = server.address().address\r\n    port = server.address().port\r\n    ready && ready({ host, port, running: true })\r\n  })\r\n\r\n  return {\r\n    stop (callback) {\r\n      process.disconnect && process.disconnect()\r\n      server.listening && server.close(callback)\r\n    },\r\n    addLogger (logger) {\r\n      loggers.push(logger)\r\n    }\r\n  }\r\n}\r\n"]}